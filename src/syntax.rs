use lazy_static::lazy_static;
use std::fmt;

pub type SyntaxFlags = u32;
pub const NUMBERS: SyntaxFlags = 1 << 0;
pub const STRINGS: SyntaxFlags = 1 << 1;

pub enum FileType {
    C,
    Sh,
    Rust,
    Python,
}

impl fmt::Display for FileType {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        match &self {
            FileType::C => write!(f, "C"),
            FileType::Sh => write!(f, "SHELL"),
            FileType::Rust => write!(f, "RUST"),
            FileType::Python => write!(f, "Python"),
        }
    }
}

pub struct Comment {
    pub single: Option<String>,
    pub multiline: Option<(String, String)>,
}

impl Comment {
    pub fn new(single: Option<&str>, multiline: Option<(&str, &str)>) -> Self {
        Self {
            single: single.map(|s| s.to_string()),
            multiline: multiline.map(|(s, e)| (s.to_string(), e.to_string())),
        }
    }
}

pub enum Keyword {
    Base(String),
    Type(String),
}

pub struct Syntax {
    pub filetype: FileType,
    pub filematch: Vec<String>,
    pub flags: SyntaxFlags,
    pub comment: Comment,
    pub keywords: Vec<Keyword>,
}

impl Syntax {
    pub fn new(
        filetype: FileType,
        filematch: Vec<&str>,
        flags: SyntaxFlags,
        comment: Comment,
        keywords: Vec<Keyword>,
    ) -> Self {
        Self {
            filetype,
            filematch: filematch.iter().map(|s| s.to_string()).collect(),
            flags,
            comment,
            keywords,
        }
    }
}

// Syntax highlight database
lazy_static! {
    pub static ref HLDB: Vec<Syntax> = vec![
        Syntax::new(
            FileType::C,
            vec!["c", "h", "cc", "cpp", "hpp"],
            NUMBERS | STRINGS,
            Comment::new(Some("//"), Some(("/*", "*/"))),
            vec![
                Keyword::Base("switch".into()),
                Keyword::Base("if".into()),
                Keyword::Base("else".into()),
                Keyword::Base("for".into()),
                Keyword::Base("while".into()),
                Keyword::Base("break".into()),
                Keyword::Base("continue".into()),
                Keyword::Base("case".into()),
                Keyword::Base("default".into()),
                Keyword::Base("do".into()),
                Keyword::Base("goto".into()),
                Keyword::Base("return".into()),
                Keyword::Base("const".into()),
                Keyword::Base("enum".into()),
                Keyword::Base("struct".into()),
                Keyword::Base("union".into()),
                Keyword::Base("typedef".into()),
                Keyword::Base("sizeof".into()),
                Keyword::Base("volatile".into()),
                Keyword::Base("register".into()),
                Keyword::Base("static".into()),
                Keyword::Base("extern".into()),
                Keyword::Base("inline".into()),
                Keyword::Base("asm".into()),
                Keyword::Base("class".into()),
                Keyword::Base("public".into()),
                Keyword::Base("private".into()),
                Keyword::Base("protected".into()),
                Keyword::Base("new".into()),
                Keyword::Base("delete".into()),
                Keyword::Base("operator".into()),
                Keyword::Base("template".into()),
                Keyword::Base("this".into()),
                Keyword::Base("friend".into()),
                Keyword::Base("virtual".into()),
                Keyword::Base("try".into()),
                Keyword::Base("throw".into()),
                Keyword::Base("catch".into()),
                Keyword::Type("void".into()),
                Keyword::Type("auto".into()),
                Keyword::Type("char".into()),
                Keyword::Type("int".into()),
                Keyword::Type("short".into()),
                Keyword::Type("long".into()),
                Keyword::Type("signed".into()),
                Keyword::Type("unsigned".into()),
                Keyword::Type("float".into()),
                Keyword::Type("double".into()),
            ],
        ),
        Syntax::new(
            FileType::Sh,
            vec!["sh"],
            NUMBERS | STRINGS,
            Comment::new(Some("#"), None),
            vec![
                Keyword::Base("if".into()),
                Keyword::Base("then".into()),
                Keyword::Base("else".into()),
                Keyword::Base("elif".into()),
                Keyword::Base("fi".into()),
                Keyword::Base("case".into()),
                Keyword::Base("esac".into()),
                Keyword::Base("for".into()),
                Keyword::Base("select".into()),
                Keyword::Base("while".into()),
                Keyword::Base("until".into()),
                Keyword::Base("do".into()),
                Keyword::Base("done".into()),
                Keyword::Base("in".into()),
                Keyword::Base("function".into()),
                Keyword::Base("time".into()),
                Keyword::Base("alias".into()),
                Keyword::Base("bg".into()),
                Keyword::Base("bind".into()),
                Keyword::Base("break".into()),
                Keyword::Base("builtin".into()),
                Keyword::Base("cd".into()),
                Keyword::Base("command".into()),
                Keyword::Base("compgen".into()),
                Keyword::Base("complete".into()),
                Keyword::Base("continue".into()),
                Keyword::Base("declare".into()),
                Keyword::Base("dirs".into()),
                Keyword::Base("disown".into()),
                Keyword::Base("echo".into()),
                Keyword::Base("enable".into()),
                Keyword::Base("expr".into()),
                Keyword::Base("eval".into()),
                Keyword::Base("exec".into()),
                Keyword::Base("exit".into()),
                Keyword::Base("export".into()),
                Keyword::Base("fc".into()),
                Keyword::Base("fg".into()),
                Keyword::Base("getopts".into()),
                Keyword::Base("hash".into()),
                Keyword::Base("help".into()),
                Keyword::Base("history".into()),
                Keyword::Base("jobs".into()),
                Keyword::Base("kill".into()),
                Keyword::Base("let".into()),
                Keyword::Base("local".into()),
                Keyword::Base("logout".into()),
                Keyword::Base("popd".into()),
                Keyword::Base("pushd".into()),
                Keyword::Base("printf".into()),
                Keyword::Base("pwd".into()),
                Keyword::Base("read".into()),
                Keyword::Base("readonly".into()),
                Keyword::Base("return".into()),
                Keyword::Base("set".into()),
                Keyword::Base("shift".into()),
                Keyword::Base("shopt".into()),
                Keyword::Base("source".into()),
                Keyword::Base("suspend".into()),
                Keyword::Base("test".into()),
                Keyword::Base("times".into()),
                Keyword::Base("trap".into()),
                Keyword::Base("type".into()),
                Keyword::Base("typeset".into()),
                Keyword::Base("ulimit".into()),
                Keyword::Base("umask".into()),
                Keyword::Base("unalias".into()),
                Keyword::Base("unset".into()),
                Keyword::Base("wait".into()),
                Keyword::Type("IFS".into()),
                Keyword::Type("PATH".into()),
                Keyword::Type("PS1".into()),
                Keyword::Type("HOME".into()),
                Keyword::Type("GLOBIGNORE".into()),
                Keyword::Type("HOSTNAME".into()),
                Keyword::Type("HOSTTYPE".into()),
                Keyword::Type("OSTYPE".into()),
                Keyword::Type("MACHTYPE".into()),
                Keyword::Type("MAIL".into()),
                Keyword::Type("MAILPATH".into()),
                Keyword::Type("MAILCHECK".into()),
                Keyword::Type("OPTARG".into()),
                Keyword::Type("OPTIND".into()),
                Keyword::Type("OPTERR".into()),
                Keyword::Type("EXECIGNORE".into()),
                Keyword::Type("BASHOPTS".into()),
                Keyword::Type("SHELLOPTS".into()),
                Keyword::Type("BASH".into()),
                Keyword::Type("SHELL".into()),
                Keyword::Type("BASHPID".into()),
                Keyword::Type("PPID".into()),
                Keyword::Type("BASH_CMDS".into()),
                Keyword::Type("POSIXLY_CORRECT".into()),
                Keyword::Type("BASH_COMPAT".into()),
                Keyword::Type("ENV".into()),
                Keyword::Type("BASH_ENV".into()),
                Keyword::Type("BASH_EXECUTION_STRING".into()),
                Keyword::Type("BASH_LOADABLES_PATH".into()),
                Keyword::Type("SHLVL".into()),
                Keyword::Type("BASH_SUBSHELL".into()),
                Keyword::Type("BASH_VERSION".into()),
                Keyword::Type("BASH_VERSINFO".into()),
                Keyword::Type("COLUMNS".into()),
                Keyword::Type("LINES".into()),
                Keyword::Type("HOSTFILE".into()),
                Keyword::Type("COPROC".into()),
                Keyword::Type("EMACS".into()),
                Keyword::Type("INSIDE_EMACS".into()),
                Keyword::Type("CDPATH".into()),
                Keyword::Type("PWD".into()),
                Keyword::Type("OLDPWD".into()),
                Keyword::Type("REPLY".into()),
                Keyword::Type("TMOUT".into()),
                Keyword::Type("UID".into()),
                Keyword::Type("EUID".into()),
                Keyword::Type("GROUPS".into()),
                Keyword::Type("PIPESTATUS".into()),
                Keyword::Type("TMPDIR".into()),
                Keyword::Type("DIRSTACK".into()),
                Keyword::Type("IGNOREEOF".into()),
                Keyword::Type("RANDOM".into()),
                Keyword::Type("SECONDS".into()),
                Keyword::Type("TIMEFORMAT".into()),
                Keyword::Type("{".into()),
                Keyword::Type("}".into()),
                Keyword::Type("!".into()),
                Keyword::Type("[".into()),
                Keyword::Type("]".into()),
                Keyword::Type("[[".into()),
                Keyword::Type("]]".into()),
                Keyword::Type("(".into()),
                Keyword::Type(")".into()),
                Keyword::Type("((".into()),
                Keyword::Type("))".into()),
                Keyword::Type(":".into()),
                Keyword::Type(".".into()),
                Keyword::Type("=".into()),
            ],
        ),
        Syntax::new(
            FileType::Rust,
            vec!["rs"],
            NUMBERS | STRINGS,
            Comment::new(Some("//"), Some(("/*", "*/"))),
            vec![
                Keyword::Base("as".into()),
                Keyword::Base("async".into()),
                Keyword::Base("await".into()),
                Keyword::Base("break".into()),
                Keyword::Base("const".into()),
                Keyword::Base("continue".into()),
                Keyword::Base("crate".into()),
                Keyword::Base("dyn".into()),
                Keyword::Base("else".into()),
                Keyword::Base("enum".into()),
                Keyword::Base("extern".into()),
                Keyword::Base("false".into()),
                Keyword::Base("fn".into()),
                Keyword::Base("for".into()),
                Keyword::Base("if".into()),
                Keyword::Base("impl".into()),
                Keyword::Base("in".into()),
                Keyword::Base("let".into()),
                Keyword::Base("loop".into()),
                Keyword::Base("match".into()),
                Keyword::Base("mod".into()),
                Keyword::Base("move".into()),
                Keyword::Base("mut".into()),
                Keyword::Base("pub".into()),
                Keyword::Base("ref".into()),
                Keyword::Base("return".into()),
                Keyword::Base("self".into()),
                Keyword::Base("Self".into()),
                Keyword::Base("static".into()),
                Keyword::Base("struct".into()),
                Keyword::Base("super".into()),
                Keyword::Base("trait".into()),
                Keyword::Base("true".into()),
                Keyword::Base("type".into()),
                Keyword::Base("unsafe".into()),
                Keyword::Base("use".into()),
                Keyword::Base("where".into()),
                Keyword::Base("while".into()),
                Keyword::Type("u8".into()),
                Keyword::Type("i8".into()),
                Keyword::Type("u16".into()),
                Keyword::Type("i16".into()),
                Keyword::Type("u32".into()),
                Keyword::Type("i32".into()),
                Keyword::Type("u64".into()),
                Keyword::Type("i64".into()),
                Keyword::Type("f32".into()),
                Keyword::Type("f64".into()),
                Keyword::Type("u128".into()),
                Keyword::Type("i128".into()),
                Keyword::Type("usize".into()),
                Keyword::Type("isize".into()),
            ],
        ),
        Syntax::new(
            FileType::Python,
            vec!["py"],
            NUMBERS | STRINGS,
            // Although, """ is not a comment, it mimics one
            Comment::new(Some("#"), Some(("\"\"\"", "\"\"\""))),
            vec![
                Keyword::Base("False".into()),
                Keyword::Base("None".into()),
                Keyword::Base("True".into()),
                Keyword::Base("and".into()),
                Keyword::Base("as".into()),
                Keyword::Base("assert".into()),
                Keyword::Base("async".into()),
                Keyword::Base("await".into()),
                Keyword::Base("break".into()),
                Keyword::Base("class".into()),
                Keyword::Base("continue".into()),
                Keyword::Base("def".into()),
                Keyword::Base("del".into()),
                Keyword::Base("elif".into()),
                Keyword::Base("else".into()),
                Keyword::Base("except".into()),
                Keyword::Base("finally".into()),
                Keyword::Base("for".into()),
                Keyword::Base("from".into()),
                Keyword::Base("global".into()),
                Keyword::Base("if".into()),
                Keyword::Base("import".into()),
                Keyword::Base("in".into()),
                Keyword::Base("is".into()),
                Keyword::Base("lambda".into()),
                Keyword::Base("nonlocal".into()),
                Keyword::Base("not".into()),
                Keyword::Base("or".into()),
                Keyword::Base("pass".into()),
                Keyword::Base("raise".into()),
                Keyword::Base("return".into()),
                Keyword::Base("try".into()),
                Keyword::Base("while".into()),
                Keyword::Base("with".into()),
                Keyword::Base("yield".into()),
                Keyword::Type("int".into()),
                Keyword::Type("float".into()),
                Keyword::Type("complex".into()),
                Keyword::Type("str".into()),
                Keyword::Type("tuple".into()),
                Keyword::Type("range".into()),
                Keyword::Type("bytes".into()),
                Keyword::Type("bytearray".into()),
                Keyword::Type("memoryview".into()),
                Keyword::Type("dict".into()),
                Keyword::Type("bool".into()),
                Keyword::Type("set".into()),
                Keyword::Type("frozenset".into()),
            ],
        ),
    ];
}
